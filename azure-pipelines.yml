# Azure DevOps Pipeline for EduCMS Frontend Deployment
# Equivalent to GitHub Actions workflow: .github/workflows/azure-deploy.yml

trigger:
  branches:
    include:
    - main
    - develop
  paths:
    exclude:
    - backend/*
    - docs/*
    - README.md

pr:
  branches:
    include:
    - main
  paths:
    exclude:
    - backend/*
    - docs/*
    - README.md

# Pipeline variables
variables:
  # Build Configuration
  nodeVersion: '20.x'
  buildConfiguration: 'Release'
  
  # Azure Configuration
  azureWebAppName: 'educsme-demo'
  azureSubscriptionServiceConnection: 'Azure-EduCMS-ServiceConnection'
  
  # Artifact Configuration
  artifactName: 'educsme-frontend-build'
  
  # Environment Variables (will be overridden by variable groups)
  VITE_USE_DOTNET_API: 'false'
  VITE_APP_ENVIRONMENT: 'production'

# Variable Groups (to be configured in Azure DevOps)
# - EduCMS-Secrets (contains VITE_SUPABASE_URL, VITE_SUPABASE_ANON_KEY)
# - EduCMS-Production (production-specific variables)
# - EduCMS-Staging (staging-specific variables)

stages:
# ==========================================
# STAGE 1: BUILD AND TEST
# ==========================================
- stage: BuildAndTest
  displayName: 'üèóÔ∏è Build and Test'
  jobs:
  - job: BuildJob
    displayName: 'Build and Test Frontend'
    pool:
      vmImage: 'ubuntu-latest'
    
    variables:
    - group: EduCMS-Secrets
    
    steps:
    # Checkout with full history for better caching
    - checkout: self
      fetchDepth: 0
      displayName: 'üì• Checkout Code'
    
    # Setup Node.js with caching
    - task: NodeTool@0
      displayName: 'üü¢ Setup Node.js $(nodeVersion)'
      inputs:
        versionSpec: '$(nodeVersion)'
        checkLatest: true
    
    # Cache node_modules for faster builds
    - task: Cache@2
      displayName: 'üì¶ Cache node_modules'
      inputs:
        key: 'npm | "$(Agent.OS)" | package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
          npm
        path: '$(System.DefaultWorkingDirectory)/node_modules'
    
    # Install dependencies
    - script: |
        npm ci
        echo "‚úÖ Dependencies installed successfully"
      displayName: 'üì¶ Install Dependencies'
    
    # Run linting
    - script: |
        npm run lint
        echo "‚úÖ Linting completed successfully"
      displayName: 'üîç Run Linting'
      continueOnError: false
    
    # Run tests (currently placeholder)
    - script: |
        npm run test:ci || echo "‚ö†Ô∏è Tests not configured yet"
        echo "‚úÖ Tests completed"
      displayName: 'üß™ Run Tests'
      continueOnError: true
    
    # Build application with environment variables
    - script: |
        npm run build
        echo "‚úÖ Build completed successfully"
      displayName: 'üèóÔ∏è Build Application'
      env:
        VITE_SUPABASE_URL: $(VITE_SUPABASE_URL)
        VITE_SUPABASE_ANON_KEY: $(VITE_SUPABASE_ANON_KEY)
        VITE_USE_DOTNET_API: $(VITE_USE_DOTNET_API)
        VITE_APP_ENVIRONMENT: $(VITE_APP_ENVIRONMENT)
    
    # Verify build output
    - script: |
        if [ ! -d "dist" ]; then
          echo "‚ùå Build failed: dist directory not found"
          exit 1
        fi
        if [ ! -f "dist/index.html" ]; then
          echo "‚ùå Build failed: index.html not found in dist"
          exit 1
        fi
        echo "‚úÖ Build verification successful"
        echo "üìä Build Statistics:"
        echo "- Dist folder size: $(du -sh dist/ | cut -f1)"
        echo "- Files generated: $(find dist/ -type f | wc -l)"
        ls -la dist/
      displayName: '‚úÖ Verify Build Output'
    
    # Publish build artifacts
    - task: PublishBuildArtifacts@1
      displayName: 'üì§ Publish Build Artifacts'
      inputs:
        pathToPublish: 'dist'
        artifactName: '$(artifactName)'
        publishLocation: 'Container'
    
    # Publish package.json for deployment reference
    - task: PublishBuildArtifacts@1
      displayName: 'üì§ Publish Package Info'
      inputs:
        pathToPublish: 'package.json'
        artifactName: '$(artifactName)-metadata'
        publishLocation: 'Container'

# ==========================================
# STAGE 2: DEPLOY TO STAGING
# ==========================================
- stage: DeployStaging
  displayName: 'üöÄ Deploy to Staging'
  dependsOn: BuildAndTest
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  
  variables:
  - group: EduCMS-Staging
  
  jobs:
  - deployment: DeployToStaging
    displayName: 'Deploy to Azure App Service Staging'
    environment: 'EduCMS-Staging'
    pool:
      vmImage: 'ubuntu-latest'
    
    strategy:
      runOnce:
        deploy:
          steps:
          # Download build artifacts
          - download: current
            artifact: '$(artifactName)'
            displayName: 'üì• Download Build Artifacts'
          
          # Deploy to Azure App Service Staging Slot
          - task: AzureWebApp@1
            displayName: 'üöÄ Deploy to Azure App Service (Staging)'
            inputs:
              azureSubscription: '$(azureSubscriptionServiceConnection)'
              appType: 'webApp'
              appName: '$(azureWebAppName)'
              slotName: 'staging'
              package: '$(Pipeline.Workspace)/$(artifactName)'
              deploymentMethod: 'auto'
          
          # Health check for staging deployment
          - script: |
              echo "‚è≥ Waiting for deployment to stabilize..."
              sleep 30
              
              STAGING_URL="https://$(azureWebAppName)-staging.azurewebsites.net"
              echo "üîç Testing staging URL: $STAGING_URL"
              
              if curl -f -s --max-time 30 "$STAGING_URL" > /dev/null; then
                echo "‚úÖ Staging deployment successful!"
                echo "üåê Staging URL: $STAGING_URL"
              else
                echo "‚ùå Staging deployment failed - site not responding"
                exit 1
              fi
            displayName: 'üîç Health Check (Staging)'

# ==========================================
# STAGE 3: DEPLOY TO PRODUCTION
# ==========================================
- stage: DeployProduction
  displayName: 'üöÄ Deploy to Production'
  dependsOn: BuildAndTest
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  
  variables:
  - group: EduCMS-Production
  
  jobs:
  - deployment: DeployToProduction
    displayName: 'Deploy to Azure App Service Production'
    environment: 'EduCMS-Production'
    pool:
      vmImage: 'ubuntu-latest'
    
    strategy:
      runOnce:
        deploy:
          steps:
          # Download build artifacts
          - download: current
            artifact: '$(artifactName)'
            displayName: 'üì• Download Build Artifacts'
          
          # Deploy to Azure App Service Production
          - task: AzureWebApp@1
            displayName: 'üöÄ Deploy to Azure App Service (Production)'
            inputs:
              azureSubscription: '$(azureSubscriptionServiceConnection)'
              appType: 'webApp'
              appName: '$(azureWebAppName)'
              package: '$(Pipeline.Workspace)/$(artifactName)'
              deploymentMethod: 'auto'
          
          # Health check for production deployment
          - script: |
              echo "‚è≥ Waiting for deployment to stabilize..."
              sleep 30
              
              PROD_URL="https://$(azureWebAppName).azurewebsites.net"
              echo "üîç Testing production URL: $PROD_URL"
              
              if curl -f -s --max-time 30 "$PROD_URL" > /dev/null; then
                echo "‚úÖ Production deployment successful!"
                echo "üåê Production URL: $PROD_URL"
              else
                echo "‚ùå Production deployment failed - site not responding"
                exit 1
              fi
            displayName: 'üîç Health Check (Production)'
          
          # Post-deployment verification
          - script: |
              PROD_URL="https://$(azureWebAppName).azurewebsites.net"
              
              echo "üîç Running post-deployment verification..."
              
              # Check if the app loads with EduCMS content
              if curl -s --max-time 10 "$PROD_URL" | grep -q "EduCMS"; then
                echo "‚úÖ Application content is loading correctly"
              else
                echo "‚ö†Ô∏è Application content check failed - may need investigation"
              fi
              
              echo "üìä Deployment Summary:"
              echo "- Environment: Production"
              echo "- Status: ‚úÖ Deployed Successfully"
              echo "- URL: $PROD_URL"
              echo "- Deployed At: $(date -u)"
              echo "- Build ID: $(Build.BuildId)"
              echo "- Source Branch: $(Build.SourceBranch)"
              echo "- Commit: $(Build.SourceVersion)"
            displayName: 'üß™ Post-Deployment Verification'
